@page "/EditEmpleado/{Id:guid}"
@rendermode InteractiveServer

@attribute [AllowAnonymous]
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NotificationService notificationService
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Edit> Logger

<RadzenNotification />
<EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />
     
    <div class="container-fluid">
        <div class="card shadow-lg w-50 mx-auto">
            <div class="card-header" style=" background-color: #012E40">
                <h3 class="text-center text-white">Editar Empleado</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        <label class="fw-bold mb-2">Nombre</label>
                        <InputText @bind-Value="Input.Nombre" class="form-control mb-3" />
                        <ValidationMessage For="@(()=>Input.Nombre)" />
                    </div>
                    <div class="col-6">
                        <label class="fw-bold mb-2">Nombre</label>
                        <InputText @bind-Value="Input.Apellido" class="form-control mb-3" />
                        <ValidationMessage For="@(()=>Input.Apellido)" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-6">
                        <label class="fw-bold mb-3">Password</label>
                        <InputText @bind-Value="Input.Password" class="form-control"/>
                        <ValidationMessage For="@(()=>Input.Password)" />
                    </div>
                    <div class="col-6">
                        <label class="fw-bold mb-3">C&eacute;dula</label>
                        <InputNumber @bind-Value="Input.Cedula" class="form-control"/>
                        <ValidationMessage For="@(()=>Input.Cedula)" />
                    </div>

                </div>
                <div class="row">
                    <div class="col-6">
                        <label class="fw-bold mb-3">Rol</label>
                        <InputSelect @bind-Value="Input.Rol" class="form-control">
                            <option value="">Seleccione un rol</option>
                            <option value="Empleado">Empleado</option>
                            <option value="Juez">Juez</option>
                            <option value="Admin">Admin</option>
                        </InputSelect>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="btn-group">
                    <a href="IndexAudiencia" class="btn btn-secondary">Atr&aacute;s</a>
                    <button type="submit" class="btn btn-success">Guardar</button>
                </div>
            </div>
        </div>

    </div>
</EditForm>






@* 
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText  @bind-Value="Input.Email" class="form-control"  />
                <label class="form-label">Email</label>
                <ValidationMessage For="() => user.NormalizedUserName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.Rol" class="form-control">
                    <option value="">Seleccione un rol</option>
                    <option value="Empleado">Empleado</option>
                    <option value="Juez">Juez</option>
                    <option value="Admin">Admin</option>
                </InputSelect>>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </EditForm>
    </div>
</div> *@

@code {
    [Parameter]
    public Guid Id { get; set; }
    private string? message;
    private ApplicationUser user = new ApplicationUser();
    private bool hasPassword;
    public string ActualRol { get; set; }
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        user = await UserManager.FindByIdAsync(Id.ToString());
        var roles = await UserManager.GetRolesAsync(user);
        Input.Rol = roles.FirstOrDefault();
        Input.Cedula = user.Cedula;
        Input.Nombre = user.Nombre;
        Input.Apellido = user.Apellido;
        Input.Password = user.PasswordHash;
        ActualRol = roles.FirstOrDefault();
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        // var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);

        // if (!changePasswordResult.Succeeded)
        // {
        //     message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
        //     return;
        // }

        // await UserManager.ChangePasswordAsync(user, user.PasswordHash, Input.Password);
        await UserManager.ResetPasswordAsync(user, await UserManager.GeneratePasswordResetTokenAsync(user), Input.Password);
        await UserManager.RemoveFromRoleAsync(user, ActualRol);
        await UserManager.AddToRoleAsync(user, Input.Rol);
        user.Cedula = Input.Cedula;
        user.Nombre = Input.Nombre;
        user.Apellido = Input.Apellido;
        var actualizado =await UserManager.UpdateAsync(user);
        // await SignInManager.RefreshSignInAsync(user);

        if (!actualizado.Succeeded)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se ha actualizado correctamente",S
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Éxito",
                    Detail = "Actializado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
        }
    }

    private sealed class InputModel
    {
        public string Rol { get; set; } = "";
        public string Nombre { get; set; } = "";
        public string Apellido { get; set; } = "";
        public string Password { get; set; } = "";
        public long? Cedula{ get; set; }
    }
}
