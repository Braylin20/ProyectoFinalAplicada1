@page "/CreateEmpleado"
@attribute [Authorize(Roles = "Admin")]
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender

@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registrar Empleado</PageTitle>

<AuthorizeView>
    <ChildContent Context="formContext">
        <div class="container py-5">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card shadow-lg border-0 rounded-3">
                        <div class="card-header bg-primary text-white text-center">
                            <h2 class="fw-bold">Registrar Empleado</h2>
                            <img src="PoderJudicial.png" class="img-fluid" style="width:150px;" />
                        </div>
                        <div class="card-body">
                            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                                <DataAnnotationsValidator />
                                <h2 class="text-center mb-4">Crear Empleado</h2>
                                <ValidationSummary class="text-danger" role="alert" />
                                <div class="row">
                                    <div class="col">
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="Input.Nombre" class="form-control" autocomplete="username" aria-required="true" placeholder="Nombre" />
                                            <label for="nombre">Nombre</label>
                                            <ValidationMessage For="() => Input.Nombre" class="text-danger" />
                                        </div>
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                            <label for="email">Email</label>
                                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                                        </div>
                                    </div>
                                    <div class="col">
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="Input.Apellido" class="form-control" autocomplete="username" aria-required="true" placeholder="Apellido" />
                                            <label for="apellido">Apellido</label>
                                            <ValidationMessage For="() => Input.Apellido" class="text-danger" />
                                        </div>
                                        <div class="form-floating mb-3">
                                            <InputNumber type="password" @bind-Value="Input.Cedula" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Cédula" />
                                            <label for="confirm-password">Cedula</label>
                                            <ValidationMessage For="() => Input.Cedula" class="text-danger" />
                                        </div>
                                    </div>
                                </div>
                                <div class="form-floating mb-3">
                                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                                    <label for="password">Password</label>
                                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                                </div>
                                <div class="form-floating mb-3">
                                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                                    <label for="confirm-password">Confirm Password</label>
                                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                                </div>
                                <div class="form-floating mb-3">
                                    <InputSelect @bind-Value="Input.Rol" class="form-control">
                                        <label for="Seleccione un rol">Seleccione un rol</label>
                                        <option value="">Seleccione un rol</option>
                                        <option value="Empleado">Empleado</option>
                                        <option value="Admin">Admin</option>
                                        
                                    </InputSelect>
                                    <ValidationMessage For="() => Input.Rol" class="text-danger" />
                                </div>
                                <div class="card-footer">
                                    <a href="IndexEmpleado" class="btn text-white" style=" background-color: #012E40">
                                        <img src="Back.svg" style="width:25px; " />Atr&aacute;s
                                    </a>
                                    <button type="submit" class="btn btn-primary">Registrar Empleado</button>

                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </ChildContent>
</AuthorizeView>

@code {
    protected override async Task OnInitializedAsync()
    {
        Roles = RoleManager.Roles.ToList();
        
    }

    private IEnumerable<IdentityError>? identityErrors;
    public List<IdentityRole> Roles { get; set; } = new List<IdentityRole>(); // Lista de roles disponibles
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.FechaCreacion = DateTime.Today;
        user.Cedula = Input.Cedula;
        user.Nombre = Input.Nombre;
        user.Apellido = Input.Apellido;
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);
        

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }


        if(Input.Rol == "Admin")
        {
            await RoleManager.CreateAsync(new IdentityRole("Admin"));
            await UserManager.AddToRoleAsync(user, "Admin");
        }
        else if(Input.Rol == "Empleado")
        {
            await RoleManager.CreateAsync(new IdentityRole("Empleado"));
            await UserManager.AddToRoleAsync(user, "Empleado");
        }
        else
        {
            await RoleManager.CreateAsync(new IdentityRole("Juez"));
            await UserManager.AddToRoleAsync(user, "Juez");
        }

        //await UserManager.AddToRoleAsync(user, "c6cfaa84-cde7-42de-9c00-56f34ef2dd88");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El Email es requerido")]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La Contraseña es requerida")]
        [StringLength(100, ErrorMessage = "El {0} debe tener al menos {2} y como máximo {1} caracteres de longitud.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Contraseña")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirmar Contraseña")]
        [Compare("Password", ErrorMessage = "La contraseña y la confirmación de contraseña no coinciden.")]
        public string ConfirmPassword { get; set; } = "";
        [RegularExpression(@"^\d{11}$", ErrorMessage = "La cédula debe tener 11 digitos")]
        public long Cedula { get; set; }
        [Required(ErrorMessage = "Debe asignar un Rol")]
        public string Rol { get; set; }
        [Required(ErrorMessage = "El Nombre es requerido")]
        public string Nombre { get; set; }
        [Required(ErrorMessage = "El Apellido es requerido")]
        public string Apellido { get; set; }
    }
}