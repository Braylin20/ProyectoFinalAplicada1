@page "/CreateSentencia/{DemandaId:int}"
@attribute [Authorize(Roles = "Admin,Empleado")]
@inject NotificationService notificationService
@inject SentenciaServices sentenciaService
@inject TiposResolucionServices resolucionService
@inject ApplicationUserServices applicationUserServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> userManager
@inject DemandaServices demandaService
@attribute [StreamRendering]
@rendermode InteractiveServer

<RadzenNotification />

<EditForm Model="sentencia">
    <DataAnnotationsValidator />

    <div class="container-fluid">
        <div class="card shadow-lg w-50 mx-auto mt-5" >
            <div class="card-header text-white" style=" background-color: #012E40">
                <h3 class="text-center">Agregar Sentencia a la Demanda</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="form-group">
                        <label class="fw-bold mb-2">Sentencia de la Demanda:</label>
                        <InputFile accept=".pdf" class="form-control" OnChange="agregarArchivo" />
                        <ValidationMessage For="@(()=>sentencia.Sentencia)" />
                    </div>

                    <div class="form-group">
                        <label class="fw-bold" for="Apellido"> Tipo Resolucion:</label>
                        <InputSelect @bind-Value="sentencia.ResolucionId" class="form-control">
                            <option value="">Seleccione una opcion</option>
                            @foreach (var item in ListaResolucion)
                            {
                                var tipoResolucion = resolucionService.GetResolucion(item.ResolucionId);
                                <option value="@item.ResolucionId">@tipoResolucion</option>
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="btn-group">
                    <a href="IndexSentencia" class="btn text-white" style=" background-color: #012E40">
                        <img src="Back.svg" style="width:25px; " />Atr&aacute;s
                    </a>
                    <button type="button" @onclick="Guardar" class="btn btn-success">
                        <img src="Save.svg" style="width:25px" /> Guardar
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public int DemandaId { get; set; }
    public Sentencias sentencia { get; set; } = new Sentencias();
    public Demandas? demanda { get; set; } = new Demandas();
    public List<TipoResoluciones> ListaResolucion = new List<TipoResoluciones>();
    private AuthenticationState authenticationState;
    public ApplicationUser user { get; set; } = new ApplicationUser();




    protected override async Task OnInitializedAsync()
    {
        demanda = await demandaService.GetDemanda(DemandaId);
        sentencia.FechaCreacion = DateTime.Now;
        ListaResolucion = await resolucionService.GetResoluciones();
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();


        user = await userManager.FindByEmailAsync(authenticationState.User.Identity.Name);


    }
    public async Task Guardar()
    {
        Console.WriteLine("Guardando...");
        sentencia.DemandaId = DemandaId;
        sentencia.NombreMinisterio = "Tribunal";
        var guardado = await sentenciaService.Save(sentencia);
        if (!guardado)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se ha guardado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Éxito",
                    Detail = "Se ha guardado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            user.ContadorSentencias +=1;
            demanda.EstadoId = 1;
            await demandaService.SaveChanges(demanda);
            await applicationUserServices.SaveChanges(user);
            sentencia = new Sentencias();
        }
    }
    public async Task agregarArchivo(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo != null)
        {
            var stream = archivo.OpenReadStream();
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                sentencia.Sentencia= memoryStream.ToArray();
            }
        }
    }
}
