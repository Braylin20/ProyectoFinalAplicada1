@page "/CreateDemanda"

@rendermode InteractiveServer
@inject NotificationService notificationService
@inject DemandaServices demandaServices
@inject AlguacilServices alguacilServices
@inject EstadoServices estadoServices
@inject AudienciasServices audienciaServices
@inject TipoDemandaServices tipoDemandaServices
@inject UserManager<ApplicationUser> userManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<RadzenNotification />
<EditForm Model="Demanda" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="container-fluid ">
        <div class="card shadow-lg ">
            <div class="card-header" style="background-color: #012E40">
                <h3 class="text-center text-white">Crear Demanda</h3>
            </div>
            <div class="row">
                <div class="card-body">
                    <div class="row">
                        <AuthorizeView Roles="User">
                            <ChildContent Context="formContext">

                                <div class="col-6">
                                    <div class="form-group">
                                        <label class="fw-bold mb-2">C&eacute;dula:</label>
                                        <InputNumber  @bind-Value="Demanda.Cedula" class="form-control"  readonly/>
                                        <ValidationMessage For="@(()=>Demanda.Cedula)" />
                                
                                    </div>
                                </div>
                            </ChildContent>

                        </AuthorizeView>


                        <AuthorizeView Roles="Admin,Empleado">
                            <ChildContent Context="formContext">

                                <div class="col-6">
                                    <div class="form-group">
                                        <label class="fw-bold mb-2">C&eacute;dula:</label>
                                        <InputNumber @bind-Value="Demanda.Cedula" class="form-control"/>
                                        <ValidationMessage For="@(()=>Demanda.Cedula)" />

                                    </div>
                                </div>
                            </ChildContent>

                        </AuthorizeView>
                        <div class="col-6">
                            <div class="form-group">
                                <label class="fw-bold mb-2">Instancia:</label>
                                <InputFile accept=".pdf" class="form-control" OnChange="agregarArchivo" />
                                <ValidationMessage For="@(()=>Demanda.Documento)" />
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="form-group">
                                <label class="fw-bold mb-2">Foto copia de c&eacute;dula:</label>
                                <InputFile accept=".png" class="form-control" OnChange="agregarFotoCedula" />
                                <ValidationMessage For="@(()=>Demanda.FotoCedula)" />
                            </div>
                        </div>
                    </div>
                    <div class="col-12">
                        <label class="fw-bold mb-2">Descripci&oacute;n</label>
                        <InputTextArea @bind-Value="Demanda.Descripcion" class="form-control mb-3" />
                        <ValidationMessage For="@(()=>Demanda.Descripcion)" />
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <div class="card-body border border-primary">
                                <div>
                                    <h3>Registro Demandado</h3>
                                </div>
                                <div class="row">
                                    <div class="col-6 ">
                                        <label>Nombre</label>
                                        <div class="input-group">
                                            <InputText @bind-Value="demandasDetalle.NombreDemandado" class="form-control " />
                                            <ValidationMessage For="@(()=> demandasDetalle.NombreDemandado)" />
                                            <button type="button" class="btn btn-success bi-floppy-fill" @onclick="AgregarDetalleDemandado">Agregar</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-8">
                                        <label class="mt-3">Numero de c&eacute;dula</label>
                                        <InputText @bind-Value="demandasDetalle.NumCedulaDemandado" class="form-control" />
                                        <ValidationMessage For="@(()=> demandasDetalle.NumCedulaDemandado)"/>
                                    </div>
                                </div>
                                <hr clas="border-bottom" />
                                <div>
                                    <table class="table table-bordered text-center">
                                        <thead class="text-white" style="background-color: #012E40">
                                            <tr>
                                                <th>Numero de c&eacute;dula</th>
                                                <th>Nombre de Demandado</th>
                                                <th>Eliminar</th>

                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Demanda.DemandaDetalles)
                                            {
                                                <tr>
                                                    <td>@item.NumCedulaDemandado</td>
                                                    <td>@item.NombreDemandado</td>
                                                    <td>
                                                        <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick="@(()=> RemoverDetalleDemandado(item))" >
                                                            <img src="DeleteBlack.svg" style="width: 25px " />
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="card-body  border border-primary">
                                <div>
                                    <h3>Registro Niño</h3>
                                </div>
                                <div class="row">
                                    <div class="col-6 ">
                                        <label>Fecha de nacimiento</label>
                                        <div class="input-group">
                                            <InputDate @bind-Value="NinoDetalle.FechaNacimientoNino" class="form-control " />
                                            <button type="button" class="btn btn-success bi-floppy-fill" @onclick="AgregarDetalleNino">Agregar</button>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-6">
                                        <label class="mt-3">Nombre</label>
                                        <InputText @bind-Value="NinoDetalle.NombreNino" class="form-control" />
                                    </div>
                                    <div class="col-6">
                                        <label class="mt-3">Genero</label>
                                        <InputSelect @bind-Value="NinoDetalle.Genero" class="form-control">
                                            <option value="">Seleccione un genero</option>
                                            <option value="Femenino">Femenino</option>
                                            <option value="Masculino">Masculino</option>
                                        </InputSelect>
                                    </div>
                                </div>
                                <hr clas="border-bottom" />
                                <div>
                                    <table class="table table-bordered text-center">
                                        <thead class="text-white"style="background-color: #012E40">
                                            <tr>
                                                <th>Nombre</th>
                                                <th>G&eacute;nero</th>
                                                <th>Fecha de Nacimiento</th>
                                                <th>Eliminar</th>

                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Demanda.UsuarioNinoDetalles)
                                            {
                                                <tr>
                                                    <td>@item.NombreNino</td>
                                                    <td>@item.Genero</td>
                                                    <td>@item.FechaNacimientoNino</td>
                                                    <td>
                                                        <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick="@(()=> RemoverDetalleNino(item))" >
                                                        <img src="DeleteBlack.svg" style="width: 25px "/>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <AuthorizeView Roles="Admin, Empleado">
                <ChildContent Context="formContext">
                    <div class="card-footer">
                        <div class="btn-group">
                            <a href="IndexDemanda" class="btn text-white" style=" background-color: #012E40">
                                <img src="Back.svg" style="width:25px; " />Atr&aacute;s
                            </a>

                            <button type="submit" class="btn btn-success">
                                <img src="Save.svg" style="width:25px" /> Guardar
                            </button>
                        </div>
                    </div>
                </ChildContent>
            </AuthorizeView>
            <AuthorizeView Roles="User">
                <ChildContent Context="formContext">
                    <div class="card-footer">
                        <div class="btn-group">
                            <a href="IndexDemandaUser" class="btn text-white" style=" background-color: #012E40">
                                <img src="Back.svg" style="width:25px; " />Atr&aacute;s
                            </a>

                            <button type="submit" class="btn btn-success">
                                <img src="Save.svg" style="width:25px" /> Guardar
                            </button>
                        </div>
                    </div>
                </ChildContent>
            </AuthorizeView>
        </div>
    </div>
        

</EditForm>


<PageTitle>Counter</PageTitle>


@code {
    private List<IBrowserFile> archivos = new List<IBrowserFile>();
    private byte[] ArchivoSeleccionado;
    public Demandas Demanda = new Demandas();
    public DemandasDetalle demandasDetalle = new DemandasDetalle();
    public NinoDetalle NinoDetalle = new NinoDetalle();
    public ApplicationUser User = new ApplicationUser();
    public List<Alguaciles> Alguaciles { get; set; } = new List<Alguaciles>();
    public List<EstadosDemandas> EstadoDemandas { get; set; } = new List<EstadosDemandas>();
    public List<Audiencias> Audiencias { get; set; } = new List<Audiencias>();
    public List<TiposDemandas> TiposDemandas { get; set; } = new List<TiposDemandas>();
    private AuthenticationState authenticationState;

    protected override async Task OnInitializedAsync()
    {

        Alguaciles = await alguacilServices.Listar(a =>true);
        EstadoDemandas = await estadoServices.Listar(e =>true);
        Audiencias = await audienciaServices.Listar(e =>true);
        TiposDemandas = await tipoDemandaServices.Listar(e => true);
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Demanda.Fecha = DateTime.Now;
        NinoDetalle.FechaNacimientoNino = DateTime.Now;
        var user = await userManager.FindByEmailAsync(authenticationState.User.Identity.Name);
        var roles = await userManager.GetRolesAsync(user);
        foreach (var item in roles)
        {
            if (item == "User")
            {
                Demanda.Cedula = user.Cedula;
            }
        }

    }

    public async Task agregarArchivo(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo != null)
        {
            var stream = archivo.OpenReadStream();
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                Demanda.Documento = memoryStream.ToArray();
            }
        }
    }
    public async Task agregarFotoCedula(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo != null)
        {
            var stream = archivo.OpenReadStream();
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                Demanda.FotoCedula = memoryStream.ToArray();
            }
        }
    }
    public async Task AgregarDetalleDemandado()
    {
        if (demandasDetalle.NombreDemandado == null || demandasDetalle.NumCedulaDemandado == null ||demandasDetalle.NumCedulaDemandado.Length != 11)
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Debe ingresar algún valor en el demandado o la cédula es invalida",
                    Duration = 4_000
                };
            notificationService.Notify(mensajeError);
            return;
        }
        else
        {
            Demanda.DemandaDetalles.Add(demandasDetalle);
            
        }
    }


    public bool validar()
    {
        if (demandasDetalle.NombreDemandado == null || demandasDetalle.NumCedulaDemandado == null || demandasDetalle.NumCedulaDemandado.Length != 11)
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Debe ingresar algún valor en el demandado o la cédula es invalida",
                    Duration = 4_000
                };
            notificationService.Notify(mensajeError);
            return false;
        }

        else if (NinoDetalle.NombreNino is null || NinoDetalle.Genero is null)
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Debe ingresar algún valor en el niño",
                    Duration = 4_000
                };
            notificationService.Notify(mensajeError);
            return false;
        }
        return true;
    }
    public async Task AgregarDetalleNino()
    {
        if (NinoDetalle.NombreNino is null || NinoDetalle.Genero is null)
        {
            var mensajeError = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Debe ingresar algún valor en el niño",
                    Duration = 4_000
                };
            notificationService.Notify(mensajeError);
            return;
        }
        else
        {
            Demanda.UsuarioNinoDetalles.Add(NinoDetalle);
           
        }
    }

    public async Task Guardar()
    {
        if (validar() == false) { return;};
        Demanda.Fecha = DateTime.Now;
        var guardado = await demandaServices.Save(Demanda);
        if (!guardado)
        {
            var mensajeError = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "No se ha guardado correctamente",
                Duration = 4_000
            };
            notificationService.Notify(mensajeError);
            return;
        }
        var mensaje = new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Éxito",
            Detail = "Se ha guardado correctamente",
            Duration = 4_000
        };
        notificationService.Notify(mensaje);
        Demanda = new Demandas();
        demandasDetalle = new DemandasDetalle();
        NinoDetalle = new NinoDetalle();


    }
    public async Task RemoverDetalleDemandado(DemandasDetalle detalle)
    {
        var detalleEncontrado = Demanda.DemandaDetalles.FirstOrDefault(v => v.DetalleId == detalle.DetalleId);
        if (detalleEncontrado != null)
        {
            Demanda.DemandaDetalles.Remove(detalle);
        }
    }
    public async Task RemoverDetalleNino(NinoDetalle detalle)
    {
        var detalleEncontrado = Demanda.UsuarioNinoDetalles.FirstOrDefault(v => v.DetalleId == detalle.DetalleId);
        if (detalleEncontrado != null)
        {
            Demanda.UsuarioNinoDetalles.Remove(detalle);
        }
    }
   
    public void Nuevo()
    {
        Demanda = new Demandas();
        demandasDetalle = new DemandasDetalle();
        Demanda.Fecha = DateTime.Now;
    }
}
