@page "/Account/Login"

@using ProyectFinal.Data
@attribute [Microsoft.AspNetCore.Authorization.AllowAnonymous]
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject NotificationService notificationService
<PageTitle>Log in</PageTitle>


<RadzenNotification />
<EditForm Model="Input" OnValidSubmit="LoginUser" FormName="Login">
    <DataAnnotationsValidator />
    <div class="container d-flex justify-content-center align-items-center min-vh-100">
        <div class="row border rounded-3 p-3 bg-white shadow box-area ">
            <div class="col-md-6 rounded-3 d-flex justify-content-center align-items-center flex-column left-box" style="background: #103cbe">
                <div class="featured-image mb-3 mt-3">
                    <img src="PoderJudicial.png" class="img-fluid" style="width:250px;" />
                </div>
                <p class="text-white fs-2" style="font-family: Courier New, Courier, monospace; font-weight:600;">UN MEJOR FUTURO</p>
                <small class="text-white text-wrap text-center" style="width: 17rem; font-family:Courier New, Courier, monospace">El Tribunal de Niños y Niñas protege el bienestar de los menores.</small>
            </div>
            <div class="col-md-6 right-box">

                <div class="row align-items-center">
                    <div class="header-text mb-4">
                       
                    </div>
                    <div class="input-group mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control form-control-lg bg-light " placeholder="Email" />
                    </div>
                        <ValidationMessage For="@(()=>Input.Email)" />
                    <div class="input-group mb-1">
                        <InputText @bind-Value="Input.Password" class="form-control form-control-lg bg-light " placeholder="Password" type="password" password />
                    </div>
                        <ValidationMessage For="@(()=>Input.Password)"/>
                    <div class="input-group mb-5 d-flex justify-content-between">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="formCheck" />
                            <label form="formCheck" class="form-check-label text-secondary"><small>Remember Me</small></label>
                        </div>
                        <div class="forgot">
                            <small><a href="#">Forgot Password?</a></small>
                        </div>
                    </div>
                    <div class="input-group mb-3">
                        <button type="submit" class="btn btn-lg btn-primary w-100  fs-6">Login</button>
                    </div>
                    <div class="row">
                        <p>
                            ¿No tienes una cuenta?<a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"> Registrarse</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>



@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
      
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Usuario o Contraseña Incorrecta",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage ="Este campo es requerido")]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Este campo es requerido")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
  

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
