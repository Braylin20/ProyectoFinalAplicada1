@page "/PhoneNumber"
@inject EmpleadoServices empleadosServices
@inject TiposTelefonosServices TiposTelefonosServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext context
@inject NotificationService notificationService
@inject ApplicationUserServices ApplicationUserServices
@rendermode InteractiveServer
<RadzenNotification/>
<div class="card shadow-lg w-50 mx-auto">
    <div class="card-header">
        <h3>Tel&eacute;fono</h3>
    </div>
    <div class="card-body ">
        <div class="card-body border border-primary mb-4">
            <div>
                <h3>Registro Demandado</h3>
            </div>
            <div class="row">
                <div class="col-6">
                    <label class="fw-bold mb-2">Tippo de tel&eacute;fono</label>
                    <div class="input-group">
                        <InputSelect @bind-Value="TelefonoDetalle.TipoId" class="form-select mb-2">
                            <option value="">Elija una opci&oacute;n</option>
                            @foreach (var item in TiposTelefonos)
                            {
                                <option value="@item.TipoTelefonoId">@item.Descripcion</option>
                            }
                        </InputSelect>
                        <button type="button" class="btn btn-success bi-floppy-fill" @onclick="AgregarTelefono">Agregar</button>
                    </div>

                </div>

            </div>
            <div class="row">
                <div class="col-6 ">
                    <label>Nombre</label>
                    <div class="input-group">
                        <InputText @bind-Value="TelefonoDetalle.Telefono" class="form-control " />

                    </div>
                </div>
            </div>
            <hr clas="border-bottom" />
            <div>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Tipo de </th>
                            <th>Valor</th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in User.TelefonoDetalles)
                        {
                            <tr>
                                <td>@item.TipoTelefono</td>
                                <td>@item.Telefono</td>
                                <td>
                                    <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick="@(()=> RemoverTelefono(item))" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="input-group">
        <a href="" class="btn btn-secondary">Atr&aacute;s</a>
        <button type="button" @onclick="Guardar" class="btn btn-success">Guardar</button>
    </div>
</div>

@code {
    public TelefonoDetalles TelefonoDetalle { get; set; } = new();
    public List<TipoTelefonos> TiposTelefonos { get; set; } = new List<TipoTelefonos>();
    public ApplicationUser User { get; set; } = new ApplicationUser();
    private AuthenticationState authenticationState;
    protected override async Task OnInitializedAsync()
    {
        TiposTelefonos = await TiposTelefonosServices.Listar(t => true);
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }
    public async Task RemoverTelefono(TelefonoDetalles detalle)
    {
        var detalleEncontrado = User.TelefonoDetalles.FirstOrDefault(v => v.DetalleId == detalle.DetalleId);
        if (detalleEncontrado != null)
        {
            User.TelefonoDetalles.Remove(detalle);
        }
    }
    public async Task AgregarTelefono()
    {

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();


        var user = authenticationState.User;


        if (user.Identity.IsAuthenticated)
        {

            var applicationUser = user.Identity.Name;
            var usuarioAutenticado = context.Users.FirstOrDefault(u => u.UserName == applicationUser);

            var nuevoTelefono = new TelefonoDetalles
                {

                    TipoId = TelefonoDetalle.TipoId,
                    Telefono = TelefonoDetalle.Telefono,

                    Id = applicationUser
                };

            if (User.TelefonoDetalles == null)
            {
                User.TelefonoDetalles = new List<TelefonoDetalles>();
            }
            if (usuarioAutenticado.TelefonoDetalles.FirstOrDefault(u => u.Telefono == TelefonoDetalle.Telefono) == null)
            {
                User.TelefonoDetalles.Add(nuevoTelefono);
            }
            else
            {
                var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "El teléfono ya existe",
                    Duration = 4_000
                };
                notificationService.Notify(mensaje);
                TelefonoDetalle = new TelefonoDetalles();
            }
            
        }
        
    }
    public async Task Guardar()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var applicationUser = user.Identity.Name;
        var usuarioActualizar = context.Users.FirstOrDefault(u => u.UserName == applicationUser);
        usuarioActualizar.TelefonoDetalles = User.TelefonoDetalles;
        var guardado =await ApplicationUserServices.Update(usuarioActualizar);
        if (!guardado)
        {
            var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "No se ha guardado correctamente",
                Duration = 4_000
            };
            notificationService.Notify(mensaje);
        }
        else
        {
            var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Éxito",
                Detail = "Se ha guardado correctamente",
                Duration = 4_000
            };
            notificationService.Notify(mensaje);
            User = new ApplicationUser();
            TelefonoDetalle = new TelefonoDetalles();
        }
    }
    public bool Validar()
    {
        return User.TelefonoDetalles
        .Any(t => t.Telefono == TelefonoDetalle.Telefono);
    }
}
