@page "/EditUser/{Id:guid}"
@inject EmpleadoServices empleadosServices
@inject TiposTelefonosServices TiposTelefonosServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext context
@inject NotificationService notificationService
@inject UserManager<ApplicationUser> userManager
@inject ApplicationUserServices ApplicationUserServices
@rendermode InteractiveServer
<RadzenNotification />

<EditForm Model="@User" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    
    <div class="container-fluid ">
        <div class="card shadow-lg w-50 mx-auto ">
            <div class="card-header" style="background-color: #012E40">
                <h3 class="text-center text-white">Editar Usuario</h3>
            </div>
            <div class="row">
               
                <div class="card-body">
                    <div class="row">
                        <div class="">
                            <div class="card-body border border-primary">
                                
                                <div class="row">
                                    <div class="mb-3">
                                        <label for="inputNombre" class="form-label">Nombre</label>
                                        <InputText @bind-Value="User.Nombre" class="form-control" id="inputNombre" placeholder="Nombre" />
                                        <ValidationMessage For="() => User.Nombre" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label for="inputApellido" class="form-label">Apellido</label>
                                        <InputText @bind-Value="User.Apellido" class="form-control" id="inputApellido" placeholder="Apellido" />
                                        <ValidationMessage For="() => User.Apellido" class="text-danger" />
                                    </div>
                                    <div class="mb-3">
                                        <label for="inputCedula" class="form-label">C&eacute;dula</label>
                                        <InputNumber @bind-Value="User.Cedula" class="form-control" id="inputCedula" placeholder="C&eacute;dula" />
                                        <ValidationMessage For="() => User.Cedula" class="text-danger" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="btn-group">
                    <a href="Configuration" class="btn text-white" style=" background-color: #012E40">
                        <img src="Back.svg" style="width:25px; " />Atr&aacute;s
                    </a>

                    <button type="submit" class="btn btn-success">
                        <img src="Save.svg" style="width:25px" /> Editar
                    </button>
                </div>
            </div>
        </div>
    </div>

</EditForm>
@code {
    [Parameter]
    public Guid Id { get; set; }
    public TelefonoDetalles TelefonoDetalle { get; set; } = new();
    public List<TipoTelefonos> TiposTelefonos { get; set; } = new List<TipoTelefonos>();
    public List<ApplicationUser> Usuarios { get; set; } = new List<ApplicationUser>();
    public ApplicationUser User { get; set; } = new ApplicationUser();
    private AuthenticationState authenticationState;
    public string rol { get; set; }
    protected override async Task OnInitializedAsync()
    {
        User = await ApplicationUserServices.GetUser(Id.ToString());
        TiposTelefonos = await TiposTelefonosServices.Listar(t => true);
        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }
    public async Task RemoverTelefono(TelefonoDetalles detalle)
    {
        var detalleEncontrado = User.TelefonoDetalles.FirstOrDefault(v => v.DetalleId == detalle.DetalleId);
        if (detalleEncontrado != null)
        {
            User.TelefonoDetalles.Remove(detalle);
        }
    }
    public async Task AgregarTelefono()
    {

        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();


        var user = authenticationState.User;


        if (user.Identity.IsAuthenticated)
        {

            var applicationUser = user.Identity.Name;
            var usuarioAutenticado = context.Users.FirstOrDefault(u => u.UserName == applicationUser);

            var nuevoTelefono = new TelefonoDetalles
                {

                    TipoId = TelefonoDetalle.TipoId,
                    Telefono = TelefonoDetalle.Telefono,

                    Id = applicationUser
                };

            if (User.TelefonoDetalles == null)
            {
                User.TelefonoDetalles = new List<TelefonoDetalles>();
            }
            if (usuarioAutenticado.TelefonoDetalles.FirstOrDefault(u => u.Telefono == TelefonoDetalle.Telefono) == null)
            {
                User.TelefonoDetalles.Add(nuevoTelefono);
            }
            else
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "El teléfono ya existe",
                        Duration = 4_000
                    };
                notificationService.Notify(mensaje);
                TelefonoDetalle = new TelefonoDetalles();
            }

        }

    }
    public async Task Guardar()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        var applicationUser = user.Identity.Name;
        var usuarioActualizar = context.Users.FirstOrDefault(u => u.UserName == applicationUser);
        var usuarioAct = (await userManager.GetUsersInRoleAsync("Admin"));
        var usuario = usuarioAct.FirstOrDefault(u => u.UserName == applicationUser);
        if( usuario is not null)
        {
            usuarioActualizar.TelefonoDetalles = User.TelefonoDetalles;
            usuarioActualizar.Nombre = User.Nombre;
            usuarioActualizar.Apellido = User.Apellido;
            usuarioActualizar.Cedula = User.Cedula;
            usuarioActualizar.UserName = User.UserName;
        }

        Usuarios = await ApplicationUserServices.Listar(u => true);
        if(Usuarios.Any(u => u.Cedula == User.Cedula && u.Id != User.Id))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "La cédula ya existe",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var guardado = await ApplicationUserServices.Update(usuarioActualizar);
        if (!guardado)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se ha guardado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Éxito",
                    Detail = "Se ha guardado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            User = new ApplicationUser();
            TelefonoDetalle = new TelefonoDetalles();
        }
    }
    public bool Validar()
    {
        return User.TelefonoDetalles
        .Any(t => t.Telefono == TelefonoDetalle.Telefono);
    }
}
