@page "/CreateAudiencia"

@rendermode InteractiveServer
@inject NotificationService notificationService
@inject AudienciasServices audienciaServices
@* @inject DemandaServices demandaServices *@
@attribute [StreamRendering]

<RadzenNotification />


@if(ListaDemandas is null)
{
    <p>Cargando...</p>
}
else
{
    <EditForm Model="Audiencia" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        
        <div class="container-fluid">
            <div class="card shadow-lg w-50 mx-auto" >
                <div class="card-header" style=" background-color: #012E40">
                    <h3 class="text-center text-white">Registro Audiencia</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <label class="fw-bold mb-2">Fecha de Audiencia</label>
                            <InputDate @bind-Value="Audiencia.FechaAudiencia" class="form-control mb-3"/>
                            <ValidationMessage For="@(()=>Audiencia.FechaAudiencia)" />
                        </div>
                        @* <div class="col-6">
                            <label class="fw-bold mb-2">Demandas</label>
                            <InputSelect @bind-Value="Audiencia.DemandaId" class="form-control">
                                <option value="">Seleccione un tipo de demanda</option>
                                @foreach (var demanda in ListaDemandas)
                                {
                                    <option value="@demanda.DemandaId">@demanda.TipoDemanda</option>
                                }

                            </InputSelect>
                        </div> *@
                        
                    </div>
                    <div class="row">
                        <div>
                            <label class="fw-bold mb-3">Comentario</label>
                            <InputTextArea @bind-Value="Audiencia.Comentario" class="form-control" placeholder="Ingrese un comentario" />
                            <ValidationMessage For="@(()=>Audiencia.Comentario)" />
                        </div>

                    </div>
                </div>
                <div class="card-footer">
                    <div class="btn-group">
                        <a href="IndexAudiencia" class="btn btn-secondary">Atr&aacute;s</a>
                        <button type="submit" class="btn btn-success">Guardar</button>
                    </div>
                </div>
            </div>
            
        </div>
    </EditForm>
}


@code {
    public Audiencias Audiencia { get; set; } = new Audiencias();
    private List<Demandas>? ListaDemandas { get; set; } = new List<Demandas>();

    protected override async Task OnInitializedAsync()
    {
        // await Task.Delay(1000);
        // ListaDemandas = await demandaServices.GetDemandas();
        Audiencia.FechaAudiencia = DateTime.Now;
    }
    public async Task Guardar()
    {
        var guardado = await audienciaServices.Save(Audiencia);
        if(!guardado)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se ha guardado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Éxito",
                    Detail = "Se ha guardado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            Audiencia = new Audiencias();
        }

    }
}
