@page "/DeleteAudiencia/{AudienciaId:int}"
@inject NotificationService notificationService
@inject AudienciasServices audienciaServices
@rendermode InteractiveServer


<RadzenNotification />
<div class="container-fluid">
    <div class="card shadow-lg w-50 mx-auto">
        <div class="card-header">
            <h3 class="text-danger text-center"> ¿Seguro que quieres eliminar esta Audiencia?</h3>
        </div>
        <div class="card-body">
            <p> AudienciaId: @Audiencia.AudienciaId</p>
            <p> Fecha: @Audiencia.FechaAudiencia</p>
            <p> Descripci&oacute;n: @Audiencia.Comentario</p>
        </div>
        <div class="card-footer">
            <div class="btn-group">
                <a href="IndexAudiencia" class="btn text-white" style=" background-color: #012E40">
                    <img src="Back.svg" style="width:25px; " />Atr&aacute;s
                </a>
                <button class="btn btn-danger" @onclick="Eliminar">

                    <img src="DeleteBlack.svg" type="button" style="width: 25px;" />Delete
                </button>

            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int AudienciaId { get; set; }
    public Audiencias Audiencia { get; set; } = new Audiencias();

    protected override async Task OnInitializedAsync()
    {
        Audiencia = await audienciaServices.GetAudiencia(AudienciaId);
    }
    public async Task Eliminar()
    {
        var eliminado = await audienciaServices.DeleteAudiencia(Audiencia.AudienciaId);
        if (!eliminado)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se ha eliminado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Éxito",
                    Detail = "Se ha eliminado correctamente",
                    Duration = 4_000
                };
            notificationService.Notify(mensaje);
            Audiencia = new Audiencias();
        }

    }
    public async Task Eliminar1()
    {
        var eliminado = await audienciaServices.DeleteAudiencia(Audiencia.AudienciaId);
    }
}
