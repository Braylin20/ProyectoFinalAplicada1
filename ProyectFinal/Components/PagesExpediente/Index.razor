@page "/IndexExpediente"
@rendermode InteractiveServer
@inject ExpedienteServices expedienteService
@inject NotificationService notificationService
@inject SentenciaServices sentenciaService
@inject DemandaServices demandaService
@inject TiposResolucionServices resolucionService
@inject TipoDemandaServices demandasServices

<RadzenNotification />
<div class="card shadow-lg">
    <div class="card-header">
        <h3 class="text-white text-center">Index</h3>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-4">
                <label>Filtrar Por</label>
                <InputSelect @bind-Value="Opcion" class="form-select">
                    <option value="1">ExpedienteId</option>
                    <option value="2">Fecha</option>
                    <option value="4">Todo</option>
                </InputSelect>
            </div>
            <div class="justify-content-end d-flex mb-4">
                <a href="CreateExpediente" class="btn btn-success bi-floppy-fill">Create</a>
            </div>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th class="table-head text-white" style="background-color: #012E40">ExpedienteId</th>
                        <th class="table-head text-white" style="background-color: #012E40">Fecha</th>
                        <th class="table-head text-white" style="background-color: #012E40">Comentario</th>
                        <th class="table-head text-white" style="background-color: #012E40">Sentencia</th>
                        <th class="table-head text-white" style="background-color: #012E40">Tipo Demanda</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ListaExpedientes)
                    {
                        var sen = ListaResolucion.FirstOrDefault(a => a.ResolucionId == item.Sentencia.ResolucionId);
                        <tr> 
                            <td>@item.ExpedienteId</td>
                            <td>@item.FechaCreacion</td>
                            <td>@item.Comentario</td>

                            @{
                                // Buscar la resolución asociada a la sentencia del expediente actual
                                var sentencia = ListaSentencias.FirstOrDefault();
                                var resolucionSentencia = sentencia != null ? ListaResolucion.FirstOrDefault(r => r.ResolucionId == sentencia.ResolucionId)?.TipoResolcion : "Sin resolución";
                            }
                            <td>@resolucionSentencia</td>

                            @{
                                // Obtener el tipo de demanda asociado al expediente actual
                                var tipoDemanda = ListaDemandas.FirstOrDefault();
                            }
                            <td>@tipoDemanda</td>
                            <td>
                                <a href="/EditExpediente/@item.ExpedienteId" class="btn btn-primary bi-box-arrow-up-right"></a>
                                <a href="/ViewExpediente/@item.ExpedienteId" class="btn btn-warning bi bi-info-square"></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>



@code {
    public Expedientes expediente { get; set; } = new Expedientes();
    public List<Expedientes>? ListaExpedientes = new List<Expedientes>();
    public List<Demandas> ListaDemandas = new List<Demandas>();
    public int Opcion { get; set; }
    public Demandas? demandas = new Demandas();
    public List<TipoResoluciones> ListaResolucion { get; set; } = new List<TipoResoluciones>();
    public List<Sentencias> ListaSentencias { get; set; } = new List<Sentencias>();
    public int contador = 0;
    public TipoResoluciones resolucion { get; set; } = new TipoResoluciones();

    protected override async Task OnInitializedAsync()
    {
        ListaExpedientes = await expedienteService.GetExpedientes();
        ListaResolucion = await resolucionService.GetResoluciones();
        ListaDemandas = await demandaService.GetDemandas();
        ListaSentencias = await sentenciaService.Listar(p => true);

       
    }

}
