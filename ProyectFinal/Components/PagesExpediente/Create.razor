@page "/CreateExpediente"
@inject ExpedienteServices expedienteService
@inject SentenciaServices sentenciaService
@inject DemandaServices demandaService
@inject TiposResolucionServices resolucionService
@inject TipoDemandaServices demandasServices
@inject UserManager<ApplicationUser> UserManager
@inject NotificationService notificationService
@rendermode InteractiveServer
<PageTitle>Ticket</PageTitle>

<RadzenNotification/>
<EditForm Model="expediente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg" >
            <div class="card-header" style=" background-color: #012E40">
                <h3 class="text-white text-center">Registro de Expediente.</h3>
            </div>
            <div class=card-body>
                <div class="row">
                    <div class="col-6 mb-3">
                        <label class="form-label" for="Nombre">C&eacute;dula del usuario:</label>
                        <div class="input-group">
                            <InputNumber type="number" @bind-Value="@Usuario.Cedula" class="form-control" min="0" />
                            <button type="button"class="btn btn-outline-primary" @onclick="BuscarUsuario">Buscar</button>
                        </div>
                    </div>
                    <div class="col-6 mb-3">
                        <label class="form-label" for="Nombre">Nombre:</label>
                        <InputText @bind-Value="Usuario.Nombre" class="form-control" disabled />
                    </div>
                </div>
                <div class="row">
                    <div class="col-6 mb-3">
                        <label class="form-label" for="Nombre">Apellido:</label>
                        <InputText @bind-Value="Usuario.Apellido" class="form-control" disabled />
                    </div>
                    <div class="col-6 mb-3">
                        <label class="form-label" for="Nombre">Email:</label>
                        <InputText @bind-Value="Usuario.UserName" class="form-control" disabled />
                    </div>
                </div>
                <div class="row">
                    <div class="col-6 mb-3">
                        <label class="form-label" for="SolicitadoPor">Resolucion Sentencia</label>
                        <InputSelect @bind-Value="expediente.SentenciaId" class="form-control">
                            <option value="">Seleccione una opcion</option>
                            @foreach (var item in sentencias)
                            {
                                var tipoResolucion = resolucionService.GetResolucion(item.ResolucionId);
                                <option value="@item.SentenciaId">@tipoResolucion</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => expediente.SentenciaId)" />
                    </div>
                    <div class="mb-3 col-6">
                        <label class="form-label" for="Nombre">Tipo Demanda:</label>
                        <InputSelect @bind-Value="expediente.DemandaId" class="form-control">
                            <option value="">Seleccione una opcion</option>
                            @foreach (var item in demandas)
                            {
                                var tipoDemanda = demandasServices.GetTipoDemanda(item.TiposDemandasId);
                                <option value="@item.DemandaId">@tipoDemanda</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => expediente.DemandaId)" />
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="SolicitadoPor">Comentario</label>
                    <InputTextArea @bind-Value="expediente.Comentario" class="form-control" />
                    <ValidationMessage For="@(() => expediente.Comentario)" />
                </div>
            </div>
            <div class="card-footer d-flex justify-content-between">
                <div class="input-group">
                    <a href="" class="bi bi-arrow-return-left btn btn-primary">Volver</a>
                    <button type="submit" class="bi bi-floppy btn btn-success">Guardar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    public Expedientes expediente = new Expedientes();
    public List<Sentencias> sentencias { get; set; } = new List<Sentencias>();
    public List<Demandas> demandas { get; set; } = new List<Demandas>();
    public ApplicationUser Usuario { get; set; } = new ApplicationUser();
    public List<ApplicationUser> Usuarios { get; set; } = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    { 
        sentencias = await sentenciaService.Listar(p => true);
        demandas = await demandaService.Listar(p => true);
    }

    public async Task BuscarUsuario()
    {
        var users = UserManager.Users.ToList();
        var user = users.FirstOrDefault(u => u.Cedula == Usuario.Cedula);
        if ( user is null)
        {
            Usuario.Nombre = string.Empty;
            Usuario.Apellido = string.Empty;
            Usuario.UserName = string.Empty;
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se encuentra ese usuario",
                    Duration = 3_000
                };
            notificationService.Notify(mensaje);
            return;
        }
        else
        {
            expediente.Id = user.Id;
            Usuario = new ApplicationUser
                {
                    Cedula = user.Cedula,
                    Nombre = user.Nombre,
                    Apellido = user.Apellido,
                    UserName = user.UserName
                };
            var mensaje2 = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Error",
                    Detail = "Encontrado Correctamente",
                    Duration = 3_000
                };
            notificationService.Notify(mensaje2);
        }
    }

    public async Task Guardar()
    {
        var guardo = await expedienteService.Save(expediente);
        if (!guardo)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No se ha guardado correctamente",
                    Duration = 3_000
                };
            notificationService.Notify(mensaje);
        }
        else
        {
            var mensaje2 = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Error",
                    Detail = "Se ha guardado correctamente",
                    Duration = 3_000
                };
            notificationService.Notify(mensaje2);
            Nuevo();
            Usuario = new ApplicationUser();
        }
    }

    public void Nuevo()
    {
        expediente = new Expedientes();
    }


}