@page "/CreateExpediente"
@inject ExpedienteServices expedienteService
@inject SentenciaServices sentenciaService
@inject DemandaServices demandaService
@inject TiposResolucionServices resolucionService
@inject TipoDemandaServices demandasServices
@rendermode InteractiveServer
<PageTitle>Ticket</PageTitle>
<EditForm Model="expediente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Expediente.</h3>
            </div>
            <div class=card-body>


                @*Fecha*@
                <div class="mb-3">
                    <label class="form-label" for="Nombre">Fecha:</label>
                    <InputDate @bind-Value="expediente.FechaCreacion" class="form-control" min="2024-01-01" />
                    <ValidationMessage For="@(() => expediente.FechaCreacion)" />
                </div>


                @*ClienteId*@
                <div class="mb-3">
                    <label class="form-label" for="SolicitadoPor">Resolucion Sentencia</label>
                    <InputSelect @bind-Value="expediente.SentenciaId" class="form-control">
                        <option value="">Seleccione una opcion</option>
                        @foreach (var item in sentencias)
                        {
                            var tipoResolucion = resolucionService.GetResolucion(item.ResolucionId);
                            <option value="@item.SentenciaId">@tipoResolucion</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => expediente.SentenciaId)" />
                </div>

                <p class="text-danger">@_mensaje</p>

                @*SistemaID*@
                <div class="mb-3">
                    <label class="form-label" for="Nombre">Tipo Demanda:</label>
                    <InputSelect @bind-Value="expediente.DemandaId" class="form-control">
                        <option value="">Seleccione una opcion</option>
                        @foreach (var item in demandas)
                        {
                            var tipoDemanda = demandasServices.GetTipoDemanda(item.TiposDemandasId);
                            <option value="@item.DemandaId">@tipoDemanda</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => expediente.DemandaId)" />
                </div>


              

               

                @*Descripcion Sistema*@
                <div class="mb-3">
                    <label class="form-label" for="SolicitadoPor">Comentario</label>
                    <InputTextArea @bind-Value="expediente.Comentario" class="form-control" />
                    <ValidationMessage For="@(() => expediente.Comentario)" />
                </div>

               
            </div>
            <div class="card-footer d-flex justify-content-between">

                <div class="btn">
                    <a href="" class="bi bi-arrow-return-left btn btn-outline-primary">Volver</a>
                </div>

                <div class="btn align-self-center">
                    <button type="submit" class="bi bi-floppy btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                
                </div>

                <div>
                </div>

            </div>

        </div>
    </div>
</EditForm>
<p class="text-success">@_mensaje3</p>

@code {
    public Expedientes expediente = new Expedientes();
    public string _mensaje = string.Empty;
    public string _mensaje3 = string.Empty;




    public async Task Guardar()
    {
        var guardo = await expedienteService.Save(expediente);
        if (guardo)
        {
            Nuevo();
            _mensaje3 = "Se ha guardado correctamente.";
        }
        else
            _mensaje = "No existe Un ClienteId o sistemaId o prioridadId";
    }

    public void Nuevo()
    {
        expediente = new Expedientes();
        _mensaje = string.Empty;
        _mensaje3 = string.Empty;
    }


    public List<Sentencias> sentencias { get; set; } = new List<Sentencias>();
    public List<Demandas> demandas { get; set; } = new List<Demandas>();

    protected override async Task OnInitializedAsync()
    {
        
        sentencias = await sentenciaService.Listar(p => true);
        demandas = await demandaService.Listar(p => true);
        
    }

}